@page "/input"
@rendermode InteractiveServer
@using CC.Input.Logic
@using CC.Input.Logic.Model
@using CC.Input.UI.WebApp.Services
@inject IInputService inputService
@inject ILogger<Input> logger
@inject NavigationManager navigationManager
@inject IConfiguration config

<PageTitle>Input</PageTitle>

<h1>Input</h1>

<div class="alert alert-info">
    Please select your file, we will upload it and report its contents and validity but only import it if you request it below...
</div>
<p><InputFile OnChange="UploadFile" class="form-control" accept=".txt" /></p>
<p>
    <input type="checkbox" @onchange="ToggleIsCommit" id="checkbox_id" /> 
    <label for="checkbox_id"><text>Import the file contents if the file is valid</text></label>
</p>
@if (fileUploadAttempted)
{
    if (fileUploadIsValid)
    {
    <div class="alert alert-success">
        The file uploaded...
    </div>
    }
    else
    {
    <div class="alert alert-danger">
            <ul>
                <li>The file is invalid...</li>
                @foreach (var error in uploadErrors)
                {
                    <li>@error</li>
                }
            </ul>    
    </div>
    }
}
@if (validationResult != null)
{
    if (validationResult.IsValid)
    {
        if (validationResult.IsCommitted)
        {
            <div class="alert alert-success">
                The @validationResult.TotalLines line(s) found within the file are valid and the contents were imported as requested, you can view them <NavLink href="inputs">here</NavLink>.
            </div>
        }
        else
        {
            <div class="alert alert-warning">
                The @validationResult.TotalLines line(s) found within the file are valid, however the file content was <strong>NOT</strong> committed as requested.
            </div>
        }
    }
    else
    {
        <div class="alert alert-danger">
            <p>The file has @validationResult.Errors.Count error(s) in @validationResult.TotalLines lines, please correct the following and upload it again...</p>
            <ol>
            @foreach (var validationMessage in validationResult.Errors)
            {
                <li>@validationMessage</li>
            }
            </ol>
        </div>
    }
}
@code {
    private ValidationResult? validationResult;
    private bool isCommit = false;
    private bool fileUploadAttempted;
    private bool fileUploadIsValid
    {
        get
        {
            return uploadErrors.Count == 0;
        }
    }
    private long maxFileSize
    {
        get
        {
            return config.GetValue<long>("MaxFileSizeInBytes");
        }
    }
    private List<string> uploadErrors = new();
    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        uploadErrors.Clear();
        fileUploadAttempted = true;
        if (!e.File.Name.EndsWith(".txt"))
            uploadErrors.Add("Only text files with a '.txt' extension are allowed, please select another.");
        if (e.File.Size > maxFileSize)//TODO chunk it!
            uploadErrors.Add($"File size {e.File.Size} bytes is too big, max file size is {maxFileSize} bytes.");//TODO magnitude label

        if(fileUploadIsValid)
        {
            try
            {
                //TODO: How can we check if the file uploaded ok? Also will require custom chunk uploading for massive file
                await using MemoryStream memoryStream = new MemoryStream();
                await e.File.OpenReadStream(maxFileSize).CopyToAsync(memoryStream);//TODO maxFileSize / chunks
                memoryStream.Position = 0;

                validationResult = await inputService.UploadAsync(memoryStream, isCommit);

                if (validationResult.IsValid && validationResult.IsCommitted)
                    logger.LogInformation($"[User] committed a file named '{e.File}'");//TODO: logging helper
            }
            catch(Exception exc)
            {
                uploadErrors.Add("Unexpected error occured, try again or contact support.");
                logger.LogError($"Error during upload: {exc}");
            }
        }
    }
    private void ToggleIsCommit()
    {
        isCommit = !isCommit;
    }
}
